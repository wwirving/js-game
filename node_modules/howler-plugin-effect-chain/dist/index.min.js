!function(){function e(){return"undefined"==typeof Howler.ctx.createGain?Howler.ctx.createGainNode():Howler.ctx.createGain()}HowlerGlobal.prototype._setup=function(t){return function(n){var o=this||Howler;return o.effectChain={debug:!1},o._effects=[],o._effectChain=e(),o._effectChainOut=e(),o.masterGain&&(o._effectChain.connect(o._effectChainOut),o._effectChainOut.connect(o.masterGain)),t.call(o,n)}}(HowlerGlobal.prototype._setup),HowlerGlobal.prototype.unload=function(e){return function(){var t=this||Howler;return t.effectChain.debug&&console.warn("[Howler Effects Chain] Calling Howler.unload() creates a new audio context, which will invalidate the effects you have created with the old context."),e.call(t)}}(HowlerGlobal.prototype.unload),Sound.prototype.create=function(e){return function(){var t=e.call(this);return t._parent._webAudio&&Howler._effectChain&&(t._node.disconnect(Howler.masterGain),t._node.connect(Howler._effectChain)),t}}(Sound.prototype.create),HowlerGlobal.prototype.addEffect=function(e){var t=this||Howler,n=t._effects[t._effects.length-1];return n?(n.disconnect(),n.connect(e)):(t._effectChain.disconnect(),t._effectChain.connect(e)),e.connect(t._effectChainOut),t._effects.push(e),t},HowlerGlobal.prototype.removeEffect=function(e){var t=this||Howler,n=t._effects.indexOf(e);if(n===-1)return console.warn("[Howler effects chain] Cannot remove the effect as it is not added to the chain:",e),t;var o=0===n?t._effectChain:t._effects[n-1],c=n===t._effects.length-1?t._effectChainOut:t._effects[n+1];return e.disconnect(),o.disconnect(),o.connect(c),t._effects=t._effects.filter(function(t){return t!==e}),t}}();